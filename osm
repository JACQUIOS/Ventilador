import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.os.Handler
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.*
import androidx.appcompat.app.AlertDialog

class Manejar_dispositivo : AppCompatActivity() {

    private var bluetoothAdapter: BluetoothAdapter? = null
    private var bluetoothSocket: BluetoothSocket? = null
    private val deviceAddress = "00:21:13:00:D7:2E"
    private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB") // UUID para el HC-05

    private lateinit var txtString: TextView
    private lateinit var txtStringLength: TextView
    private lateinit var sensorView0: TextView
    private lateinit var sensorView1: TextView
    private lateinit var sensorView2: TextView
    private lateinit var sensorView3: TextView

    private lateinit var bluetoothIn: Handler
    private val handlerState = 0 // used to identify handler message

    private var recDataString = StringBuilder()
    private var mConnectedThread: ConnectedThread? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_manejar_dispositivo)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()

        txtString = findViewById(R.id.txtString)
        txtStringLength = findViewById(R.id.txtStringLength)
        sensorView0 = findViewById(R.id.sensorView0)
        sensorView1 = findViewById(R.id.sensorView1)
        sensorView2 = findViewById(R.id.sensorView2)
        sensorView3 = findViewById(R.id.sensorView3)

        bluetoothIn = Handler {
            if (it.what == handlerState) {
                val readMessage = it.obj as String
                recDataString.append(readMessage)
                val endOfLineIndex = recDataString.indexOf("~")
                if (endOfLineIndex > 0) {
                    val dataInPrint = recDataString.substring(0, endOfLineIndex)
                    txtString.text = "Datos recibidos = $dataInPrint"
                    val dataLength = dataInPrint.length
                    txtStringLength.text = "Tamaño del String = $dataLength"

                    if (recDataString[0] == '#') {
                        val sensor0 = recDataString.substring(1, 5)
                        val sensor1 = recDataString.substring(6, 10)
                        val sensor2 = recDataString.substring(11, 15)
                        val sensor3 = recDataString.substring(16, 20)

                        sensorView0.text = if (sensor0 == "1.00") "Encendido" else "Apagado"
                        sensorView1.text = sensor1
                        sensorView2.text = sensor2
                        sensorView3.text = sensor3
                    }
                    recDataString.delete(0, recDataString.length)
                }
            }
            true
        }

        val imgBluetoothSettings: ImageView = findViewById(R.id.imgAgregar)
        imgBluetoothSettings.setOnClickListener {
            val intent = Intent(android.provider.Settings.ACTION_BLUETOOTH_SETTINGS)
            startActivity(intent)
        }

        findViewById<ImageView>(R.id.imgVincular).setOnClickListener {
            val intent = Intent(this, vincular::class.java)
            startActivity(intent)
        }
        findViewById<Button>(R.id.buttonLogout).setOnClickListener {
            val intent = Intent(this, Iniciar_session::class.java)
            startActivity(intent)
        }

        val buttons = listOf<Button>(
            findViewById(R.id.button)
        )

        buttons.forEach { button ->
            button.setOnClickListener {
                if (bluetoothSocket != null && bluetoothSocket!!.isConnected) {
                    sendBluetoothSignal("TOGGLE")
                } else {
                    Toast.makeText(this, "No hay ningún dispositivo conectado", Toast.LENGTH_SHORT).show()
                }
            }
        }

        findViewById<ImageView>(R.id.imageEncendidoApagado).setOnClickListener {
            if (bluetoothSocket != null && bluetoothSocket!!.isConnected) {
                sendBluetoothSignal("TOGGLE")
            } else {
                Toast.makeText(this, "No hay ningún dispositivo conectado", Toast.LENGTH_SHORT).show()
            }
        }

        connectToBluetoothDevice()
    }

    private fun connectToBluetoothDevice() {
        val device: BluetoothDevice? = bluetoothAdapter?.getRemoteDevice(deviceAddress)
        try {
            if (ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.BLUETOOTH_CONNECT
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                // Request missing permissions
                ActivityCompat.requestPermissions(
                    this,
                    arrayOf(Manifest.permission.BLUETOOTH_CONNECT),
                    1
                )
                return
            }
            bluetoothSocket = device?.createRfcommSocketToServiceRecord(uuid)
            bluetoothSocket?.connect()
            mConnectedThread = ConnectedThread(bluetoothSocket!!)
            mConnectedThread!!.start()
            Toast.makeText(this, "Conectado a HC-05", Toast.LENGTH_SHORT).show()
        } catch (e: IOException) {
            e.printStackTrace()
            Toast.makeText(this, "Error al conectar con HC-05", Toast.LENGTH_SHORT).show()
        }
    }

    private fun sendBluetoothSignal(signal: String) {
        try {
            mConnectedThread?.write(signal)
            Toast.makeText(this, "Señal enviada: $signal", Toast.LENGTH_SHORT).show()
        } catch (e: IOException) {
            e.printStackTrace()
            Toast.makeText(this, "Error al enviar la señal", Toast.LENGTH_SHORT).show()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            bluetoothSocket?.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    override fun onBackPressed() {
        val builder = AlertDialog.Builder(this)
        builder.setTitle("Cerrar aplicación")
        builder.setMessage("¿Estás seguro de que quieres cerrar la aplicación?")
        builder.setPositiveButton("Sí") { dialog, _ ->
            finishAffinity()
            super.onBackPressed()
        }
        builder.setNegativeButton("No") { dialog, _ ->
            dialog.dismiss()
        }
        val dialog = builder.create()
        dialog.show()
    }

    private inner class ConnectedThread(socket: BluetoothSocket) : Thread() {
        private val mmInStream: InputStream = socket.inputStream
        private val mmOutStream: OutputStream = socket.outputStream

        override fun run() {
            val buffer = ByteArray(256)
            var bytes: Int

            while (true) {
                try {
                    bytes = mmInStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    bluetoothIn.obtainMessage(handlerState, bytes, -1, readMessage).sendToTarget()
                } catch (e: IOException) {
                    break
                }
            }
        }

        fun write(input: String) {
            try {
                mmOutStream.write(input.toByteArray())
            } catch (e: IOException) {
                Toast.makeText(applicationContext, "La Conexión falló", Toast.LENGTH_LONG).show()
                finish()
            }
        }
    }
}
